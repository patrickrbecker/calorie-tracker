---
// Fetch existing contest data
import { getParticipants, getWeekData, getParticipantTotals, getCurrentWeek, getAllWeeksData } from '../lib/db.js';
import Analytics from '@vercel/analytics/astro';

let participants = [];
let weekData = {};
let participantTotals = [];
let currentWeekNumber = 1;
let allWeeksData = {};

try {
  participants = await getParticipants();
  participantTotals = await getParticipantTotals();
  currentWeekNumber = await getCurrentWeek();
  weekData = await getWeekData(currentWeekNumber);
  allWeeksData = await getAllWeeksData();
} catch (error) {
  console.log('No existing data found, starting fresh');
}

// Function to get the exact dates for each week in October 2025
function getWeekDates(weekNumber) {
  const weekDates = {
    1: ['2025-10-01', '2025-10-02', '2025-10-03', '2025-10-04', '2025-10-05'], // Wed-Sun
    2: ['2025-10-06', '2025-10-07', '2025-10-08', '2025-10-09', '2025-10-10', '2025-10-11', '2025-10-12'], // Sun-Sat
    3: ['2025-10-13', '2025-10-14', '2025-10-15', '2025-10-16', '2025-10-17', '2025-10-18', '2025-10-19'], // Sun-Sat
    4: ['2025-10-20', '2025-10-21', '2025-10-22', '2025-10-23', '2025-10-24', '2025-10-25', '2025-10-26'], // Sun-Sat
    5: ['2025-10-27', '2025-10-28', '2025-10-29', '2025-10-30', '2025-10-31'] // Sun-Thu
  };

  return weekDates[weekNumber] || weekDates[1];
}

// Generate days for current week using exact dates
const weekDays = [];
const weekDateStrings = getWeekDates(currentWeekNumber);

weekDateStrings.forEach(dateString => {
  const date = new Date(dateString);
  const dayInfo = {
    date: dateString,
    displayDate: date.toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric'
    })
  };
  weekDays.push(dayInfo);
});

// Calculate weekly totals for each participant
const weeklyTotals = {};
participants.forEach(participant => {
  weeklyTotals[participant] = 0;
  weekDays.forEach(day => {
    const dayData = weekData[day.date];
    if (dayData && dayData[participant]) {
      weeklyTotals[participant] += dayData[participant];
    }
  });
});
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Burning October 2025</title>

		<!-- Google tag (gtag.js) -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-4C0YRJ9CXX"></script>
		<script>
		  window.dataLayer = window.dataLayer || [];
		  function gtag(){dataLayer.push(arguments);}
		  gtag('js', new Date());

		  gtag('config', 'G-4C0YRJ9CXX');
		</script>

		<Analytics />
		<style>
			body {
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
				margin: 0;
				padding: 20px;
				background: #f8f9fa;
				color: #333;
			}

			/* Mobile optimizations */
			@media (max-width: 768px) {
				body {
					padding: 10px;
				}

				.container {
					margin: 0;
					border-radius: 0;
				}

				.header h1 {
					font-size: 1.5em !important;
				}

				.week-header {
					padding: 10px 15px !important;
					font-size: 1em !important;
				}

				.week-nav {
					padding: 10px 15px !important;
					flex-direction: column;
					gap: 10px;
				}

				.main-controls {
					padding: 15px !important;
					flex-direction: column;
					gap: 10px;
				}

				.participant-form.show {
					flex-direction: column !important;
					align-items: stretch !important;
				}

				.excel-table {
					font-size: 12px !important;
				}

				.excel-table th {
					min-width: 80px !important;
					padding: 8px 4px !important;
					font-size: 11px !important;
				}

				.excel-table td {
					padding: 6px 4px !important;
					min-width: 80px !important;
				}

				.excel-table .date-cell {
					min-width: 100px !important;
					padding-left: 8px !important;
				}

				.excel-table input {
					width: 60px !important;
					font-size: 12px !important;
				}

				/* Chart mobile optimization */
				#calorieChart {
					max-width: 100% !important;
					height: auto !important;
				}

				/* Mobile button styling */
				.main-controls input {
					width: 100% !important;
				}

				.main-controls button {
					width: 100% !important;
				}

				.participant-form input {
					width: 100% !important;
				}

				.participant-form button {
					width: 100% !important;
				}
			}
			
			.container {
				max-width: 1200px;
				margin: 0 auto;
				background: white;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0,0,0,0.1);
				overflow: hidden;
			}
			
			.header {
				background: #2c3e50;
				color: white;
				padding: 20px;
				text-align: center;
			}
			
			.header h1 {
				margin: 0;
				font-size: 2em;
			}
			
			.week-header {
				background: #34495e;
				color: white;
				padding: 15px 20px;
				font-size: 1.2em;
				font-weight: bold;
			}
			
			
			.excel-table {
				width: 100%;
				border-collapse: collapse;
				font-size: 14px;
			}

			/* Mobile table wrapper for horizontal scrolling */
			.table-wrapper {
				overflow-x: auto;
				-webkit-overflow-scrolling: touch;
			}
			
			.excel-table th {
				background: #34495e;
				color: white;
				padding: 12px 8px;
				text-align: center;
				border: 1px solid #2c3e50;
				font-weight: bold;
				min-width: 120px;
			}
			
			.excel-table td {
				padding: 10px 8px;
				text-align: center;
				border: 1px solid #bdc3c7;
				background: white;
			}
			
			.excel-table .date-cell {
				background: #ecf0f1;
				font-weight: bold;
				text-align: left;
				padding-left: 15px;
				min-width: 140px;
			}
			
			.excel-table .total-row {
				background: #f1c40f;
				font-weight: bold;
			}
			
			.excel-table .total-row .date-cell {
				background: #f39c12;
				color: white;
			}
			
			.excel-table input {
				width: 80px;
				padding: 4px;
				border: 1px solid #bdc3c7;
				border-radius: 3px;
				text-align: center;
			}
			
			.participant-cell {
				position: relative;
			}
			
			.participant-cell:hover {
				background: #ecf0f1;
			}

			/* Inline editing styles */
			.editable-cell {
				cursor: pointer;
				position: relative;
			}

			.editable-cell:hover {
				background: #e8f4f8 !important;
				border: 2px solid #3498db;
			}

			.editable-cell.editing {
				padding: 0;
				background: #fff3cd;
			}

			.editable-cell .edit-input {
				width: 100%;
				padding: 8px;
				border: 2px solid #007bff;
				background: white;
				text-align: center;
				font-size: 14px;
				box-sizing: border-box;
			}

			.editable-cell .edit-input:focus {
				outline: none;
				border-color: #0056b3;
			}

			.editable-cell.saving {
				background: #d1ecf1;
			}

			.editable-cell.error {
				background: #f8d7da;
				border-color: #dc3545;
			}
			
			.empty-row {
				height: 20px;
			}
			
			.add-participant {
				background: #27ae60 !important;
			}
			
			.add-participant:hover {
				background: #229954 !important;
			}
			
			.week-nav {
				padding: 15px 20px;
				background: #ecf0f1;
				display: flex;
				justify-content: space-between;
				align-items: center;
			}
			
			.week-nav button {
				padding: 8px 16px;
				background: #95a5a6;
				color: white;
				border: none;
				border-radius: 4px;
				cursor: pointer;
			}
			
			.week-nav button:hover {
				background: #7f8c8d;
			}
			
			/* Collapsible participant management */
			.participant-management {
				background: #f8f9fa;
				border-bottom: 1px solid #e9ecef;
			}
			
			.participant-toggle {
				width: 100%;
				padding: 15px 20px;
				background: #e9ecef;
				border: none;
				text-align: left;
				cursor: pointer;
				font-size: 14px;
				font-weight: bold;
				display: flex;
				justify-content: space-between;
				align-items: center;
				color: #495057;
			}
			
			.participant-toggle:hover {
				background: #dee2e6;
			}
			
			.participant-toggle-icon {
				transition: transform 0.2s ease;
			}
			
			.participant-toggle.expanded .participant-toggle-icon {
				transform: rotate(180deg);
			}
			
			.participant-form {
				display: none;
				padding: 20px;
				background: #f8f9fa;
				border-top: 1px solid #e9ecef;
			}
			
			.participant-form.show {
				display: flex;
				gap: 15px;
				align-items: center;
				flex-wrap: wrap;
			}
			
			.main-controls {
				padding: 20px;
				background: #ecf0f1;
				display: flex;
				gap: 15px;
				flex-wrap: wrap;
				align-items: center;
			}
			
			.main-controls input, .main-controls button, .participant-form input, .participant-form button {
				padding: 8px 12px;
				border: 1px solid #bdc3c7;
				border-radius: 4px;
				font-size: 14px;
			}
			
			.main-controls button, .participant-form button {
				background: #3498db;
				color: white;
				border: none;
				cursor: pointer;
				font-weight: bold;
			}
			
			.main-controls button:hover, .participant-form button:hover {
				background: #2980b9;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<!-- Header -->
			<div class="header">
				<h1>üî• Burning October 2025 üî•</h1>
				<p>Active Calories Burned Daily Tracking</p>
			</div>

			<!-- Week Navigation -->
			<div class="week-nav">
				<button id="prevWeek">‚Üê Previous Week</button>
				<span><strong>October 2025 - Week {currentWeekNumber}</strong></span>
				<button id="nextWeek">Next Week ‚Üí</button>
			</div>

			<!-- Collapsible Participant Management -->
			<div class="participant-management">
				<button class="participant-toggle" type="button">
					<span>üë• Manage Participants ({participants.length} active)</span>
					<span class="participant-toggle-icon">‚ñº</span>
				</button>
				<div class="participant-form" id="participantForm">
					<input type="text" id="newParticipant" placeholder="Enter participant name">
					<button type="button" class="add-participant" id="addParticipantBtn">Add Participant</button>
					<small style="color: #6c757d; font-style: italic;">Name is case sensitive and cannot be changed</small>
				</div>
			</div>

			<!-- Main Calorie Tracking Controls -->
			<div class="main-controls">
				<input type="date" id="selectedDate" value={weekDays[0]?.date} min="2025-10-01" max="2025-10-31">
				<input type="text" id="selectedParticipant" placeholder="Participant name">
				<input type="number" id="calorieAmount" placeholder="Calories burned" min="0">
				<button type="button" id="addCaloriesBtn">üî• Add Calories</button>
			</div>

			<!-- Excel-style Table -->
			<div class="table-wrapper">
				<table class="excel-table">
				<thead>
					<tr>
						<th>Date</th>
						{participants.map(participant => (
							<th>{participant}</th>
						))}
					</tr>
				</thead>
				<tbody>
					{weekDays.map(day => (
						<tr>
							<td class="date-cell">{day.displayDate}</td>
							{participants.map(participant => (
								<td class="participant-cell editable-cell"
									data-participant={participant}
									data-date={day.date}
									data-week={currentWeekNumber}
									title="Click to edit">
									<span class="calorie-value">{weekData[day.date]?.[participant] || ''}</span>
								</td>
							))}
						</tr>
					))}
					
					<!-- Weekly Total Row -->
					<tr class="total-row">
						<td class="date-cell">Weekly Total</td>
						{participants.map(participant => (
							<td>{weeklyTotals[participant] || 0}</td>
						))}
					</tr>
					
					<!-- Empty spacing rows -->
					<tr class="empty-row"><td colspan={participants.length + 1}></td></tr>
					<tr class="empty-row"><td colspan={participants.length + 1}></td></tr>
				</tbody>
			</table>
			</div>

			{participants.length === 0 && (
				<div style="padding: 40px; text-align: center; color: #7f8c8d;">
					<p><strong>No participants yet!</strong></p>
					<p>Add your first participant above to start the contest.</p>
				</div>
			)}

			<!-- Overall Calories Burned Table -->
			{participants.length > 0 && (
				<div style="padding: 20px; background: white; margin-top: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
					<h3 style="margin: 0 0 20px 0; text-align: center; color: #2c3e50;">üî• Overall Calories Burned</h3>
					<div class="table-wrapper">
						<table class="excel-table" id="overallTable">
						<thead>
							<tr>
								<th>Rank</th>
								<th>Participant</th>
								<th>Total Calories</th>
							</tr>
						</thead>
						<tbody id="overallTableBody">
							{participantTotals
								.sort((a, b) => b.total_calories - a.total_calories)
								.map((participant, index) => {
									const rank = index + 1;
									let rankStyle = "text-align: center; font-weight: bold;";
									let rankText = `#${rank}`;

									if (rank === 1) {
										rankStyle += " background: #FFD700; color: #000;"; // Gold
										rankText = "üèÜ #1";
									} else if (rank === 2) {
										rankStyle += " background: #C0C0C0; color: #000;"; // Silver
										rankText = "ü•à #2";
									} else if (rank === 3) {
										rankStyle += " background: #CD7F32; color: #000;"; // Bronze
										rankText = "ü•â #3";
									}

									return (
										<tr>
											<td style={rankStyle}>{rankText}</td>
											<td style="text-align: left; font-weight: bold;">{participant.name}</td>
											<td style="text-align: center;">{participant.total_calories.toLocaleString()}</td>
										</tr>
									);
								})}
						</tbody>
					</table>
					</div>
				</div>
			)}

			<!-- Chart Section -->
			{participants.length > 0 && (
				<div style="padding: 20px; background: white; margin-top: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
					<h3 style="margin: 0 0 20px 0; text-align: center; color: #2c3e50;">üèÜ Cumulative Calorie Progress - October 2025</h3>
					<canvas id="calorieChart" width="400" height="200"></canvas>
				</div>
			)}
		</div>

		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script define:vars={{ currentWeek: currentWeekNumber, chartData: participantTotals, weekData: weekData, participants: participants, weekDays: weekDays, allWeeksData: allWeeksData }}>
			// currentWeek is now available from define:vars
			
			// Initialize chart if we have data
			let calorieChart = null;
			
			function initChart() {
				const canvas = document.getElementById('calorieChart');
				if (!canvas || !participants || participants.length === 0) return;

				const ctx = canvas.getContext('2d');

				// Destroy existing chart if it exists
				if (calorieChart) {
					calorieChart.destroy();
				}

				// Generate October 2025 dates up to today
				const today = new Date();
				const currentDay = today.getMonth() === 9 && today.getFullYear() === 2025 ? today.getDate() : 31;
				const maxDay = Math.min(currentDay, 31);

				const allDates = [];
				for (let day = 1; day <= maxDay; day++) {
					const date = new Date(2025, 9, day); // October is month 9
					const dateStr = date.toISOString().split('T')[0];
					allDates.push({
						date: dateStr,
						displayDate: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
					});
				}

				// Create labels from all October dates
				const labels = allDates.map(d => d.displayDate);

				// Color palette for different participants
				const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'];

				// Create datasets for each participant with cumulative data
				const datasets = participants.map((participant, index) => {
					// Find the last date where this participant has actual calorie data
					let lastDataDate = null;
					for (let i = allDates.length - 1; i >= 0; i--) {
						if (allWeeksData[allDates[i].date]?.[participant] > 0) {
							lastDataDate = allDates[i].date;
							break;
						}
					}

					let cumulativeTotal = 0;
					const data = allDates.map((dateObj, dateIndex) => {
						const dailyCalories = allWeeksData[dateObj.date]?.[participant] || 0;
						cumulativeTotal += dailyCalories;

						// If we haven't found any data for this participant yet, return null
						if (cumulativeTotal === 0) {
							return null;
						}

						// If this date is after the last date with actual data, return null to end the line
						if (lastDataDate && dateObj.date > lastDataDate) {
							return null;
						}

						return cumulativeTotal;
					});

					const color = colors[index % colors.length];

					return {
						label: participant,
						data: data,
						borderColor: color,
						backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),
						borderWidth: 3,
						fill: false,
						tension: 0.4,
						pointBackgroundColor: color,
						pointBorderColor: color,
						pointBorderWidth: 2,
						pointRadius: 3,
						spanGaps: false
					};
				});

				calorieChart = new Chart(ctx, {
					type: 'line',
					data: {
						labels: labels,
						datasets: datasets
					},
					options: {
						responsive: true,
						plugins: {
							legend: {
								display: true,
								position: 'top'
							}
						},
						scales: {
							y: {
								beginAtZero: true,
								title: {
									display: true,
									text: 'Calories Burned'
								}
							},
							x: {
								title: {
									display: true,
									text: 'Date'
								}
							}
						}
					}
				});
			}
			
			// Update chart after adding calories
			function updateChart() {
				// Chart will be updated on page reload for now
				// In the future, we could fetch new data via AJAX
			}

			// Update the overall calories table dynamically
			async function updateOverallTable() {
				try {
					const response = await fetch('/api/debug-data');
					const result = await response.json();

					if (response.ok && result.participantTotals) {
						const sortedTotals = result.participantTotals.sort((a, b) => b.total_calories - a.total_calories);
						const tableBody = document.getElementById('overallTableBody');

						if (tableBody) {
							tableBody.innerHTML = sortedTotals.map((participant, index) => {
								const rank = index + 1;
								let rankStyle = "text-align: center; font-weight: bold;";
								let rankText = `#${rank}`;

								if (rank === 1) {
									rankStyle += " background: #FFD700; color: #000;"; // Gold
									rankText = "üèÜ #1";
								} else if (rank === 2) {
									rankStyle += " background: #C0C0C0; color: #000;"; // Silver
									rankText = "ü•à #2";
								} else if (rank === 3) {
									rankStyle += " background: #CD7F32; color: #000;"; // Bronze
									rankText = "ü•â #3";
								}

								const safeName = document.createElement('div');
								safeName.textContent = participant.name;
								const escapedName = safeName.innerHTML;

								return `
									<tr>
										<td style="${rankStyle}">${rankText}</td>
										<td style="text-align: left; font-weight: bold;">${escapedName}</td>
										<td style="text-align: center;">${parseInt(participant.total_calories).toLocaleString()}</td>
									</tr>
								`;
							}).join('');
						}
					}
				} catch (error) {
					console.error('Error updating overall table:', error);
				}
			}
			
			// Toggle participant form
			window.toggleParticipantForm = function() {
				const form = document.getElementById('participantForm');
				const toggle = document.querySelector('.participant-toggle');

				if (form && toggle) {
					if (form.classList.contains('show')) {
						form.classList.remove('show');
						toggle.classList.remove('expanded');
					} else {
						form.classList.add('show');
						toggle.classList.add('expanded');
					}
				}
			}
			
			// Add participant
			async function addParticipant() {
				const name = document.getElementById('newParticipant').value.trim();
				if (!name) {
					alert('Please enter a participant name');
					return;
				}

				try {
					const response = await fetch('/api/add-participant', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ name })
					});

					const result = await response.json();

					if (response.ok) {
						// Show success confirmation
						alert(`‚úÖ Success! "${name}" has been added to the contest!`);
						document.getElementById('newParticipant').value = '';
						window.location.reload();
					} else {
						alert(result.error || 'Failed to add participant');
					}
				} catch (error) {
					alert('Error adding participant. Please try again.');
				}
			}

			// Add calories
			async function addCalories() {
				const date = document.getElementById('selectedDate').value;
				const participant = document.getElementById('selectedParticipant').value.trim();
				const calories = parseInt(document.getElementById('calorieAmount').value);

				if (!date || !participant || calories === undefined || calories === null || isNaN(calories) || calories < 0) {
					alert('Please fill in all fields with valid values');
					return;
				}

				try {
					const response = await fetch('/api/add-calories', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ date, participant, calories, week: currentWeek })
					});

					const result = await response.json();
					if (response.ok) {
						// Show success confirmation - use the date string directly to avoid timezone issues
						const dateParts = date.split('-');
						const month = new Date(0, parseInt(dateParts[1]) - 1).toLocaleDateString('en-US', { month: 'short' });
						const formattedDate = `${month} ${parseInt(dateParts[2])}`;
						alert(`üî• Success! ${calories} calories added for ${participant} on ${formattedDate}!`);
						document.getElementById('selectedParticipant').value = '';
						document.getElementById('calorieAmount').value = '';

						// Update the overall table dynamically
						await updateOverallTable();

						// Reload to update the weekly table and chart
						window.location.reload();
					} else {
						alert(result.error || 'Failed to add calories');
					}
				} catch (error) {
					alert('Error adding calories. Please try again.');
				}
			}

			// Function to determine which week a date belongs to
			function getWeekForDate(dateString) {
				const weekDates = {
					1: ['2025-10-01', '2025-10-02', '2025-10-03', '2025-10-04', '2025-10-05'],
					2: ['2025-10-06', '2025-10-07', '2025-10-08', '2025-10-09', '2025-10-10', '2025-10-11', '2025-10-12'],
					3: ['2025-10-13', '2025-10-14', '2025-10-15', '2025-10-16', '2025-10-17', '2025-10-18', '2025-10-19'],
					4: ['2025-10-20', '2025-10-21', '2025-10-22', '2025-10-23', '2025-10-24', '2025-10-25', '2025-10-26'],
					5: ['2025-10-27', '2025-10-28', '2025-10-29', '2025-10-30', '2025-10-31']
				};

				for (let week = 1; week <= 5; week++) {
					if (weekDates[week].includes(dateString)) {
						return week;
					}
				}
				return 1; // Default to week 1
			}

			// Week navigation
			async function changeWeek(direction) {
				const newWeek = currentWeek + direction;

				if (newWeek < 1 || newWeek > 5) {
					return; // October 2025 has 5 weeks max
				}

				try {
					const response = await fetch('/api/change-week', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ week: newWeek })
					});

					const result = await response.json();

					if (response.ok) {
						window.location.reload();
					} else {
						alert('Error changing week: ' + (result.error || 'Unknown error'));
					}
				} catch (error) {
					console.error('Error changing week:', error);
					alert('Error changing week: ' + error.message);
				}
			}

			// Add click listeners
			document.addEventListener('DOMContentLoaded', function() {
				// Initialize chart
				initChart();
				
				const toggleButton = document.querySelector('.participant-toggle');
				if (toggleButton) {
					toggleButton.addEventListener('click', function(e) {
						e.preventDefault();
						window.toggleParticipantForm();
					});
				}
				
				const addButton = document.getElementById('addParticipantBtn');
				if (addButton) {
					addButton.addEventListener('click', function(e) {
						e.preventDefault();
						addParticipant();
					});
				}
				
				const addCaloriesButton = document.getElementById('addCaloriesBtn');
				if (addCaloriesButton) {
					addCaloriesButton.addEventListener('click', function(e) {
						e.preventDefault();
						addCalories();
					});
				}

				// Week navigation buttons
				const prevWeekButton = document.getElementById('prevWeek');
				if (prevWeekButton) {
					prevWeekButton.addEventListener('click', function(e) {
						e.preventDefault();
						changeWeek(-1);
					});
				}

				const nextWeekButton = document.getElementById('nextWeek');
				if (nextWeekButton) {
					nextWeekButton.addEventListener('click', function(e) {
						e.preventDefault();
						changeWeek(1);
					});
				}

				// Initialize inline editing
				initInlineEditing();

				// Date input change handler to auto-switch weeks
				const dateInput = document.getElementById('selectedDate');
				if (dateInput) {
					dateInput.addEventListener('change', async function(e) {
						const selectedDate = e.target.value;
						const selectedWeek = getWeekForDate(selectedDate);

						// If the selected date is in a different week, switch to that week
						if (selectedWeek !== currentWeek) {
							try {
								const response = await fetch('/api/change-week', {
									method: 'POST',
									headers: { 'Content-Type': 'application/json' },
									body: JSON.stringify({ week: selectedWeek })
								});

								if (response.ok) {
									window.location.reload();
								}
							} catch (error) {
								console.error('Error switching week:', error);
							}
						}
					});
				}

			});

			// Enter key handlers
			document.getElementById('newParticipant').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') addParticipant();
			});

			document.getElementById('calorieAmount').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') addCalories();
			});

			// Inline editing functions - use event delegation
			function initInlineEditing() {
				// Use event delegation on the table to catch clicks on any editable cell
				const table = document.querySelector('.excel-table');
				if (table) {
					table.addEventListener('click', function(e) {
						const cell = e.target.closest('.editable-cell');
						if (cell && !cell.classList.contains('editing')) {
							// Only edit cells that have values
							const valueSpan = cell.querySelector('.calorie-value');
							if (valueSpan && valueSpan.textContent.trim() !== '') {
								startEdit(cell);
							}
						}
					});
				}
			}

			function startEdit(cell) {
				// Store original value for rollback
				const valueSpan = cell.querySelector('.calorie-value');
				const originalValue = valueSpan.textContent.trim();
				cell.setAttribute('data-original-value', originalValue);

				// Create input field
				const input = document.createElement('input');
				input.type = 'number';
				input.className = 'edit-input';
				input.value = originalValue;
				input.min = '0';
				input.max = '50000';

				// Replace content with input
				cell.classList.add('editing');
				cell.innerHTML = '';
				cell.appendChild(input);
				input.focus();
				input.select();

				// Handle save/cancel
				input.addEventListener('keydown', function(e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						saveEdit(cell, input.value, originalValue);
					} else if (e.key === 'Escape') {
						e.preventDefault();
						cancelEdit(cell, originalValue);
					}
				});

				input.addEventListener('blur', function() {
					// Save on blur if value changed
					if (input.value !== originalValue) {
						saveEdit(cell, input.value, originalValue);
					} else {
						cancelEdit(cell, originalValue);
					}
				});
			}

			async function saveEdit(cell, newValue, originalValue) {
				const participant = cell.getAttribute('data-participant');
				const date = cell.getAttribute('data-date');
				const week = parseInt(cell.getAttribute('data-week'));

				// Validate input
				const numValue = parseInt(newValue);
				if (isNaN(numValue) || numValue < 0 || numValue > 50000) {
					alert('Please enter a valid number between 0 and 50,000');
					const input = cell.querySelector('.edit-input');
					if (input) input.focus();
					return;
				}

				// Show saving state
				cell.classList.add('saving');
				cell.classList.remove('editing');
				cell.innerHTML = '<span class="calorie-value">Saving...</span>';

				try {
					const response = await fetch('/api/update-calories', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							participant: participant,
							date: date,
							calories: numValue,
							week: week
						})
					});

					const result = await response.json();

					if (response.ok) {
						// Success - update display
						cell.classList.remove('saving');
						cell.innerHTML = `<span class="calorie-value">${numValue}</span>`;

						// Update totals
						updateTotalsAfterEdit();

						// Update chart if it exists
						if (typeof initChart === 'function') {
							// Refresh chart data and re-render
							location.reload(); // Simple approach - could be optimized
						}

					} else {
						throw new Error(result.error || 'Failed to update calories');
					}

				} catch (error) {
					console.error('Error updating calories:', error);
					// Rollback on error
					cell.classList.add('error');
					cell.classList.remove('saving');
					cell.innerHTML = `<span class="calorie-value">${originalValue}</span>`;

					alert('Error updating calories: ' + error.message + '. Changes have been reverted.');

					// Remove error state after 3 seconds
					setTimeout(() => {
						cell.classList.remove('error');
					}, 3000);
				}
			}

			function cancelEdit(cell, originalValue) {
				cell.classList.remove('editing');
				cell.innerHTML = `<span class="calorie-value">${originalValue}</span>`;
			}

			function updateTotalsAfterEdit() {
				// Simple approach - could be optimized to calculate without reload
				// For now, just note that totals may be stale until page refresh
				console.log('Calories updated - page refresh recommended for accurate totals');
			}

		</script>
	</body>
</html>