---
// Fetch existing contest data
import { getParticipants, getWeekData, getParticipantTotals, getCurrentWeek, getAllWeeksData } from '../lib/db.js';

let participants = [];
let weekData = {};
let participantTotals = [];
let currentWeekNumber = 1;
let allWeeksData = {};

try {
  participants = await getParticipants();
  participantTotals = await getParticipantTotals();
  currentWeekNumber = await getCurrentWeek();
  weekData = await getWeekData(currentWeekNumber);
  allWeeksData = await getAllWeeksData();
} catch (error) {
  console.log('No existing data found, starting fresh');
}

// Function to get the start of a given week in October 2025
function getStartOfWeek(weekNumber) {
  if (weekNumber === 1) {
    // Week 1 starts on October 1st (Wednesday)
    return new Date('2025-10-01');
  } else {
    // Subsequent weeks start on Sundays
    // Week 2 starts on October 6th (first Sunday after Oct 1)
    const firstSunday = new Date('2025-10-06');
    const sunday = new Date(firstSunday);
    sunday.setDate(firstSunday.getDate() + ((weekNumber - 2) * 7));
    return sunday;
  }
}

// Generate 7 days for current week
const weekDays = [];
const startOfWeek = getStartOfWeek(currentWeekNumber);

for (let i = 0; i < 7; i++) {
  const date = new Date(startOfWeek);
  date.setDate(startOfWeek.getDate() + i);

  // Only include dates that are in October 2025
  if (date.getMonth() === 9 && date.getFullYear() === 2025) { // October is month 9
    weekDays.push({
      date: date.toISOString().split('T')[0],
      displayDate: date.toLocaleDateString('en-US', {
        weekday: 'short',
        month: 'short',
        day: 'numeric'
      })
    });
  }
}

// Calculate weekly totals for each participant
const weeklyTotals = {};
participants.forEach(participant => {
  weeklyTotals[participant] = 0;
  weekDays.forEach(day => {
    const dayData = weekData[day.date];
    if (dayData && dayData[participant]) {
      weeklyTotals[participant] += dayData[participant];
    }
  });
});
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>October 2025 Burning Contest</title>
		<style>
			body {
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
				margin: 0;
				padding: 20px;
				background: #f8f9fa;
				color: #333;
			}
			
			.container {
				max-width: 1200px;
				margin: 0 auto;
				background: white;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0,0,0,0.1);
				overflow: hidden;
			}
			
			.header {
				background: #2c3e50;
				color: white;
				padding: 20px;
				text-align: center;
			}
			
			.header h1 {
				margin: 0;
				font-size: 2em;
			}
			
			.week-header {
				background: #34495e;
				color: white;
				padding: 15px 20px;
				font-size: 1.2em;
				font-weight: bold;
			}
			
			
			.excel-table {
				width: 100%;
				border-collapse: collapse;
				font-size: 14px;
			}
			
			.excel-table th {
				background: #34495e;
				color: white;
				padding: 12px 8px;
				text-align: center;
				border: 1px solid #2c3e50;
				font-weight: bold;
				min-width: 120px;
			}
			
			.excel-table td {
				padding: 10px 8px;
				text-align: center;
				border: 1px solid #bdc3c7;
				background: white;
			}
			
			.excel-table .date-cell {
				background: #ecf0f1;
				font-weight: bold;
				text-align: left;
				padding-left: 15px;
				min-width: 140px;
			}
			
			.excel-table .total-row {
				background: #f1c40f;
				font-weight: bold;
			}
			
			.excel-table .total-row .date-cell {
				background: #f39c12;
				color: white;
			}
			
			.excel-table input {
				width: 80px;
				padding: 4px;
				border: 1px solid #bdc3c7;
				border-radius: 3px;
				text-align: center;
			}
			
			.participant-cell {
				position: relative;
			}
			
			.participant-cell:hover {
				background: #ecf0f1;
			}
			
			.empty-row {
				height: 20px;
			}
			
			.add-participant {
				background: #27ae60 !important;
			}
			
			.add-participant:hover {
				background: #229954 !important;
			}
			
			.week-nav {
				padding: 15px 20px;
				background: #ecf0f1;
				display: flex;
				justify-content: space-between;
				align-items: center;
			}
			
			.week-nav button {
				padding: 8px 16px;
				background: #95a5a6;
				color: white;
				border: none;
				border-radius: 4px;
				cursor: pointer;
			}
			
			.week-nav button:hover {
				background: #7f8c8d;
			}
			
			/* Collapsible participant management */
			.participant-management {
				background: #f8f9fa;
				border-bottom: 1px solid #e9ecef;
			}
			
			.participant-toggle {
				width: 100%;
				padding: 15px 20px;
				background: #e9ecef;
				border: none;
				text-align: left;
				cursor: pointer;
				font-size: 14px;
				font-weight: bold;
				display: flex;
				justify-content: space-between;
				align-items: center;
				color: #495057;
			}
			
			.participant-toggle:hover {
				background: #dee2e6;
			}
			
			.participant-toggle-icon {
				transition: transform 0.2s ease;
			}
			
			.participant-toggle.expanded .participant-toggle-icon {
				transform: rotate(180deg);
			}
			
			.participant-form {
				display: none;
				padding: 20px;
				background: #f8f9fa;
				border-top: 1px solid #e9ecef;
			}
			
			.participant-form.show {
				display: flex;
				gap: 15px;
				align-items: center;
				flex-wrap: wrap;
			}
			
			.main-controls {
				padding: 20px;
				background: #ecf0f1;
				display: flex;
				gap: 15px;
				flex-wrap: wrap;
				align-items: center;
			}
			
			.main-controls input, .main-controls button, .participant-form input, .participant-form button {
				padding: 8px 12px;
				border: 1px solid #bdc3c7;
				border-radius: 4px;
				font-size: 14px;
			}
			
			.main-controls button, .participant-form button {
				background: #3498db;
				color: white;
				border: none;
				cursor: pointer;
				font-weight: bold;
			}
			
			.main-controls button:hover, .participant-form button:hover {
				background: #2980b9;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<!-- Header -->
			<div class="header">
				<h1>üî• Burning October 2025 üî•</h1>
				<p>Active Calories Burned Daily Tracking</p>
			</div>

			<!-- Week Navigation -->
			<div class="week-nav">
				<button id="prevWeek">‚Üê Previous Week</button>
				<span><strong>October 2025 - Week {currentWeekNumber}</strong></span>
				<button id="nextWeek">Next Week ‚Üí</button>
			</div>

			<!-- Collapsible Participant Management -->
			<div class="participant-management">
				<button class="participant-toggle" type="button">
					<span>üë• Manage Participants ({participants.length} active)</span>
					<span class="participant-toggle-icon">‚ñº</span>
				</button>
				<div class="participant-form" id="participantForm">
					<input type="text" id="newParticipant" placeholder="Enter participant name">
					<button type="button" class="add-participant" id="addParticipantBtn">Add Participant</button>
					<small style="color: #6c757d;">Add new contestants to the burning contest</small>
				</div>
			</div>

			<!-- Main Calorie Tracking Controls -->
			<div class="main-controls">
				<input type="date" id="selectedDate" value={weekDays[0]?.date} min="2025-10-01" max="2025-10-31">
				<input type="text" id="selectedParticipant" placeholder="Participant name">
				<input type="number" id="calorieAmount" placeholder="Calories burned" min="0">
				<button type="button" id="addCaloriesBtn">üî• Add Calories</button>
			</div>

			<!-- Excel-style Table -->
			<table class="excel-table">
				<thead>
					<tr>
						<th>Date</th>
						{participants.map(participant => (
							<th>{participant}</th>
						))}
					</tr>
				</thead>
				<tbody>
					{weekDays.map(day => (
						<tr>
							<td class="date-cell">{day.displayDate}</td>
							{participants.map(participant => (
								<td class="participant-cell">
									{weekData[day.date]?.[participant] || ''}
								</td>
							))}
						</tr>
					))}
					
					<!-- Weekly Total Row -->
					<tr class="total-row">
						<td class="date-cell">Weekly Total</td>
						{participants.map(participant => (
							<td>{weeklyTotals[participant] || 0}</td>
						))}
					</tr>
					
					<!-- Empty spacing rows -->
					<tr class="empty-row"><td colspan={participants.length + 1}></td></tr>
					<tr class="empty-row"><td colspan={participants.length + 1}></td></tr>
				</tbody>
			</table>

			{participants.length === 0 && (
				<div style="padding: 40px; text-align: center; color: #7f8c8d;">
					<p><strong>No participants yet!</strong></p>
					<p>Add your first participant above to start the contest.</p>
				</div>
			)}

			<!-- Chart Section -->
			{participants.length > 0 && (
				<div style="padding: 20px; background: white; margin-top: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
					<h3 style="margin: 0 0 20px 0; text-align: center; color: #2c3e50;">üèÜ Cumulative Calorie Progress - October 2025</h3>
					<canvas id="calorieChart" width="400" height="200"></canvas>
				</div>
			)}
		</div>

		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script define:vars={{ currentWeek: currentWeekNumber, chartData: participantTotals, weekData: weekData, participants: participants, weekDays: weekDays, allWeeksData: allWeeksData }}>
			// currentWeek is now available from define:vars
			
			// Initialize chart if we have data
			let calorieChart = null;
			
			function initChart() {
				const canvas = document.getElementById('calorieChart');
				if (!canvas || !participants || participants.length === 0) return;

				const ctx = canvas.getContext('2d');

				// Destroy existing chart if it exists
				if (calorieChart) {
					calorieChart.destroy();
				}

				// Generate October 2025 dates up to today
				const today = new Date();
				const currentDay = today.getMonth() === 9 && today.getFullYear() === 2025 ? today.getDate() : 31;
				const maxDay = Math.min(currentDay, 31);

				const allDates = [];
				for (let day = 1; day <= maxDay; day++) {
					const date = new Date(2025, 9, day); // October is month 9
					const dateStr = date.toISOString().split('T')[0];
					allDates.push({
						date: dateStr,
						displayDate: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
					});
				}

				// Create labels from all October dates
				const labels = allDates.map(d => d.displayDate);

				// Color palette for different participants
				const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'];

				// Create datasets for each participant with cumulative data
				const datasets = participants.map((participant, index) => {
					// Find the last date where this participant has actual calorie data
					let lastDataDate = null;
					for (let i = allDates.length - 1; i >= 0; i--) {
						if (allWeeksData[allDates[i].date]?.[participant] > 0) {
							lastDataDate = allDates[i].date;
							break;
						}
					}

					let cumulativeTotal = 0;
					const data = allDates.map((dateObj, dateIndex) => {
						const dailyCalories = allWeeksData[dateObj.date]?.[participant] || 0;
						cumulativeTotal += dailyCalories;

						// If we haven't found any data for this participant yet, return null
						if (cumulativeTotal === 0) {
							return null;
						}

						// If this date is after the last date with actual data, return null to end the line
						if (lastDataDate && dateObj.date > lastDataDate) {
							return null;
						}

						return cumulativeTotal;
					});

					const color = colors[index % colors.length];

					return {
						label: participant,
						data: data,
						borderColor: color,
						backgroundColor: color.replace('rgb', 'rgba').replace(')', ', 0.1)'),
						borderWidth: 3,
						fill: false,
						tension: 0.4,
						pointBackgroundColor: color,
						pointBorderColor: color,
						pointBorderWidth: 2,
						pointRadius: 3,
						spanGaps: false
					};
				});

				calorieChart = new Chart(ctx, {
					type: 'line',
					data: {
						labels: labels,
						datasets: datasets
					},
					options: {
						responsive: true,
						plugins: {
							legend: {
								display: true,
								position: 'top'
							}
						},
						scales: {
							y: {
								beginAtZero: true,
								title: {
									display: true,
									text: 'Calories Burned'
								}
							},
							x: {
								title: {
									display: true,
									text: 'Date'
								}
							}
						}
					}
				});
			}
			
			// Update chart after adding calories
			function updateChart() {
				// Chart will be updated on page reload for now
				// In the future, we could fetch new data via AJAX
			}
			
			// Toggle participant form
			window.toggleParticipantForm = function() {
				console.log('Toggle function called');
				const form = document.getElementById('participantForm');
				const toggle = document.querySelector('.participant-toggle');
				
				console.log('Form element:', form);
				console.log('Toggle element:', toggle);
				
				if (form && toggle) {
					if (form.classList.contains('show')) {
						form.classList.remove('show');
						toggle.classList.remove('expanded');
						console.log('Collapsed');
					} else {
						form.classList.add('show');
						toggle.classList.add('expanded');
						console.log('Expanded');
					}
				} else {
					console.error('Elements not found');
				}
			}
			
			// Add participant
			async function addParticipant() {
				const name = document.getElementById('newParticipant').value.trim();
				if (!name) {
					alert('Please enter a participant name');
					return;
				}

				console.log('Adding participant:', name);

				try {
					const response = await fetch('/api/add-participant', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ name })
					});

					console.log('Response status:', response.status);
					const result = await response.json();
					console.log('Response result:', result);

					if (response.ok) {
						// Show success confirmation
						alert(`‚úÖ Success! "${name}" has been added to the contest!`);
						document.getElementById('newParticipant').value = '';
						window.location.reload();
					} else {
						console.error('Add participant failed:', result);
						alert(result.error || 'Failed to add participant');
					}
				} catch (error) {
					console.error('Add participant error:', error);
					alert('Error adding participant. Please try again.');
				}
			}

			// Add calories
			async function addCalories() {
				const date = document.getElementById('selectedDate').value;
				const participant = document.getElementById('selectedParticipant').value.trim();
				const calories = parseInt(document.getElementById('calorieAmount').value);

				if (!date || !participant || !calories || calories < 0) {
					alert('Please fill in all fields with valid values');
					return;
				}

				try {
					const response = await fetch('/api/add-calories', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ date, participant, calories, week: currentWeek })
					});

					const result = await response.json();
					if (response.ok) {
						// Show success confirmation - use the date string directly to avoid timezone issues
						const dateParts = date.split('-');
						const month = new Date(0, parseInt(dateParts[1]) - 1).toLocaleDateString('en-US', { month: 'short' });
						const formattedDate = `${month} ${parseInt(dateParts[2])}`;
						alert(`üî• Success! ${calories} calories added for ${participant} on ${formattedDate}!`);
						document.getElementById('selectedParticipant').value = '';
						document.getElementById('calorieAmount').value = '';
						window.location.reload();
					} else {
						alert(result.error || 'Failed to add calories');
					}
				} catch (error) {
					alert('Error adding calories. Please try again.');
				}
			}

			// Week navigation
			async function changeWeek(direction) {
				console.log('changeWeek called with direction:', direction);
				console.log('currentWeek:', currentWeek);
				const newWeek = currentWeek + direction;
				console.log('newWeek:', newWeek);

				if (newWeek < 1 || newWeek > 5) {
					console.log('Week out of bounds, returning');
					return; // October 2025 has 5 weeks max
				}

				try {
					console.log('Sending request to change week to:', newWeek);
					const response = await fetch('/api/change-week', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ week: newWeek })
					});

					console.log('Response status:', response.status);
					const result = await response.json();
					console.log('Response result:', result);

					if (response.ok) {
						window.location.reload();
					} else {
						alert('Error changing week: ' + (result.error || 'Unknown error'));
					}
				} catch (error) {
					console.error('Error changing week:', error);
					alert('Error changing week: ' + error.message);
				}
			}

			// Add click listeners
			document.addEventListener('DOMContentLoaded', function() {
				// Initialize chart
				initChart();
				
				const toggleButton = document.querySelector('.participant-toggle');
				if (toggleButton) {
					toggleButton.addEventListener('click', function(e) {
						e.preventDefault();
						window.toggleParticipantForm();
					});
				}
				
				const addButton = document.getElementById('addParticipantBtn');
				if (addButton) {
					addButton.addEventListener('click', function(e) {
						e.preventDefault();
						addParticipant();
					});
				}
				
				const addCaloriesButton = document.getElementById('addCaloriesBtn');
				if (addCaloriesButton) {
					addCaloriesButton.addEventListener('click', function(e) {
						e.preventDefault();
						addCalories();
					});
				}

				// Week navigation buttons
				const prevWeekButton = document.getElementById('prevWeek');
				if (prevWeekButton) {
					prevWeekButton.addEventListener('click', function(e) {
						e.preventDefault();
						changeWeek(-1);
					});
				}

				const nextWeekButton = document.getElementById('nextWeek');
				if (nextWeekButton) {
					nextWeekButton.addEventListener('click', function(e) {
						e.preventDefault();
						changeWeek(1);
					});
				}

			});

			// Enter key handlers
			document.getElementById('newParticipant').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') addParticipant();
			});

			document.getElementById('calorieAmount').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') addCalories();
			});
		</script>
	</body>
</html>